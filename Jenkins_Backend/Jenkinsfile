pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SLACK_CREDENTIAL_ID = 'slack-webhook'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('üì• Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üìÅ Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üïµÔ∏è Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def backendChanged = sh(script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'", returnStatus: true) == 0
                        if (!backendChanged) {
                            echo "‚ö†Ô∏è No changes in backend code. Aborting..."
                            currentBuild.result = 'ABORTED'
                            error("No changes in backend/")
                        }
                    }
                }
            }
        }

        stage('üê≥ Build Docker Image') {
            steps {
                dir('dev') {
                    script {
                        docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
                    }
                }
            }
        }

        stage('üöÄ Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("${IMAGE_NAME}:${TAG}").push()
                        docker.image("${IMAGE_NAME}:latest").push()
                    }
                }
            }
        }

        stage('‚úèÔ∏è Update Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        def filePath = "k8s/backend/deployment.yaml"
                        sh "sed -i 's|image:.*|image: ${IMAGE_NAME}:${TAG}|' ${filePath}"
                        sh "cat ${filePath}"
                    }
                }
            }
        }

        stage('üì§ Commit & Push Changes') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: 'github-push-token', variable: 'GIT_TOKEN')]) {
                        sh """
                            git config user.email "rani.saed19@gmail.com"
                            git config user.name "Rani Saed (CI/CD)"
                            git add k8s/backend/deployment.yaml
                            if ! git diff --cached --quiet; then
                                git commit -m "üöÄ Update backend image to ${TAG}"
                                git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                git push origin main
                            else
                                echo "No changes to commit"
                            fi
                        """
                    }
                }
            }
        }

        stage('üöÄ Sync ArgoCD Backend') {
            steps {
                script {
                    sh "argocd app sync backend-app --insecure"
                }
            }
        }

        stage('‚ù§Ô∏è Health Check - Primary') {
            steps {
                script {
                    def healthStatus = sh(script: "curl -s http://localhost:5001/health | grep '\"status\":\"healthy\"'", returnStatus: true)
                    if (healthStatus != 0) {
                        error "‚ùå Primary backend health check failed!"
                    }
                }
            }
        }

        stage('‚ù§Ô∏è Health Check - DR') {
            steps {
                script {
                    def healthStatus = sh(script: "curl -s http://localhost:5002/health | grep '\"status\":\"healthy\"'", returnStatus: true)
                    if (healthStatus != 0) {
                        error "‚ùå DR backend health check failed!"
                    }
                }
            }
        }

        stage('üß™ DR Failover Test') {
            steps {
                script {
                    sh "bash scripts/failover-check.sh"
                }
            }
        }

        stage('üìÑ DR Readiness Report') {
            steps {
                script {
                    echo "üìä DR system is ready and verified for failover!"
                    writeFile file: 'dr-report.txt', text: "Backend DR Verified - Build ${TAG} ‚úÖ"
                    archiveArtifacts artifacts: 'dr-report.txt'
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Backend CI/CD succeeded with DR checks"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚úÖ *Backend* CI/CD completed with DR validation. Tag: ${TAG}"}' $SLACK_WEBHOOK
                """
            }
        }

        aborted {
            echo "‚ö†Ô∏è Pipeline aborted ‚Äî no backend changes"
        }

        failure {
            echo "‚ùå Pipeline failed"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ùå *Backend* CI/CD failed. Check Jenkins logs."}' $SLACK_WEBHOOK
                """
            }
        }
    }
}
