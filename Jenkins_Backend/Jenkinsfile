pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SLACK_CREDENTIAL_ID = 'slack-webhook'
        ARGO_PASS = credentials('argocd-admin-password') // ArgoCD password stored in Jenkins credentials
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('üì• Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üìÅ Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üïµÔ∏è Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def backendChanged = sh(
                            script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
                            returnStatus: true
                        ) == 0

                        if (!backendChanged) {
                            echo "‚ö†Ô∏è No changes in backend code. Aborting..."
                            currentBuild.result = 'ABORTED'
                            error("No changes in backend/")
                        }
                    }
                }
            }
        }

        stage('üê≥ Build Docker Image') {
            steps {
                dir('dev') {
                    script {
                        echo "üì¶ Building image ${IMAGE_NAME}:${TAG}"
                        docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
                    }
                }
            }
        }

        stage('üöÄ Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${IMAGE_NAME}:${TAG}").push()
                            docker.image("${IMAGE_NAME}:${TAG}").push("latest")
                        }
                    }
                }
            }
        }

        stage('‚úèÔ∏è Update Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        def filePath = "k8s/backend/deployment.yaml"
                        def newImage = "${IMAGE_NAME}:${TAG}"
                        echo "üîß Updating ${filePath} with new image: ${newImage}"
                        sh "sed -i 's|image:.*|image: ${newImage}|' ${filePath}"
                        sh "cat ${filePath}"
                    }
                }
            }
        }

        stage('üì§ Commit & Push Changes') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: 'github-push-token', variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.email "rani.saed19@gmail.com"
                                git config user.name "Rani Saed (CI/CD)"
                                git add k8s/backend/deployment.yaml

                                if ! git diff --cached --quiet; then
                                    git commit -m "üöÄ Update backend image to ${TAG}"
                                    git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                    git push origin main
                                else
                                    echo "No changes to commit"
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('‚úÖ Validate Primary Health') {
            steps {
                script {
                    echo "üîç Checking primary backend health at http://localhost:5000/api/products"
                    def health = sh(
                        script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:5000/api/products",
                        returnStdout: true
                    ).trim()
                    if (health != "200") {
                        error "‚ùå Primary health check failed with status ${health}"
                    }
                    echo "‚úÖ Primary backend is healthy"
                }
            }
        }

        stage('üåç Deploy to DR Region') {
            steps {
                dir('config') {
                    script {
                        sh '''
                            echo "üöÄ Syncing DR ArgoCD app..."
                            echo "$ARGO_PASS" > argocd-pass.txt
                            argocd login localhost:8080 --username admin --password $(cat argocd-pass.txt) --grpc-web --insecure
                            argocd app sync dr-backend-app --grpc-web
                            rm -f argocd-pass.txt
                        '''
                    }
                }
            }
        }

        stage('üíö Validate DR Health') {
            steps {
                script {
                    echo "üîå Starting port-forward for DR backend"
                    sh "kubectl port-forward svc/backend 5002:5000 -n dr-region > /dev/null 2>&1 &"
                    sleep 5
                    def drHealth = sh(
                        script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:5002/api/products",
                        returnStdout: true
                    ).trim()
                    if (drHealth != "200") {
                        error "‚ùå DR health check failed with status ${drHealth}"
                    }
                    echo "‚úÖ DR backend is healthy"
                }
            }
        }

        stage('‚ö° Failover Test') {
            steps {
                script {
                    echo "üß™ Simulating primary failure and checking DR readiness..."
                    def failover = sh(
                        script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:5002/api/products",
                        returnStdout: true
                    ).trim()
                    if (failover != "200") {
                        error "üö® Failover test failed. DR not serving requests!"
                    }
                    echo "‚úÖ DR passed failover test."
                }
            }
        }

        stage('üìä Generate DR Readiness Report') {
            steps {
                script {
                    def report = """
                    DR Readiness Report:
                    - Primary Health: ‚úÖ OK
                    - DR Health: ‚úÖ OK
                    - Failover Test: ‚úÖ OK
                    - Timestamp: ${new Date()}
                    """
                    writeFile file: 'dr-readiness.txt', text: report
                    echo report
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline completed successfully."
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚úÖ *Backend* CI/CD succeeded ‚Äî *${TAG}* deployed with DR verification."}' $SLACK_WEBHOOK
                """
            }
        }

        aborted {
            echo "‚èπÔ∏è Pipeline aborted"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ö†Ô∏è *Backend* pipeline aborted ‚Äî no changes detected."}' $SLACK_WEBHOOK
                """
            }
        }

        failure {
            echo "‚ùå Pipeline failed"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ùå *Backend* pipeline failed. Check Jenkins logs."}' $SLACK_WEBHOOK
                """
            }
        }
    }
}
