pipeline {
    agent any // Defines where the pipeline will run (any available agent)

    environment {
        // Docker image name for your backend service
        IMAGE_NAME = 'rani19/backend'
        // Tag for the Docker image, incorporating the Jenkins build number for uniqueness
        TAG = "build-${env.BUILD_NUMBER}"
        // URL for your development repository (backend code)
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        // URL for your configuration repository (Kubernetes manifests, etc.)
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        // Jenkins credential ID for Docker Hub login (Username with Password)
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        // Jenkins credential ID for Slack webhook (Secret Text)
        SLACK_CREDENTIAL_ID = 'slack-webhook'

        // --- Environment variables for Health Check and Failover ---
        // These URLs assume Jenkins agent can reach services on the host's localhost.
        // The K8s backend (port 5000) and frontend (port 3000) are exposed via kubectl port-forward.
        // The Docker Compose backends (5001, 5002) are directly exposed by Docker.
        MAIN_BACKEND_HEALTH_URL = 'http://localhost:5001/health' // gogo-backend (Docker Compose)
        DR_BACKEND_HEALTH_URL = 'http://localhost:5002/health'   // gogo-dr-backend (Docker Compose)
        MAIN_FRONTEND_HEALTH_URL = 'http://localhost:3000'       // Kubernetes frontend (via kubectl port-forward)
        DR_FRONTEND_HEALTH_URL = 'http://localhost:3002'         // gogo-dr-frontend (Docker Compose)

        // Docker container names from your `docker ps` output and docker-compose.yml
        MAIN_BACKEND_CONTAINER_NAME = 'gogo-backend'
        DR_BACKEND_CONTAINER_NAME = 'gogo-dr-backend'
        DR_FRONTEND_CONTAINER_NAME = 'gogo-dr-frontend'

        // Flag to track if DR was activated, for use in post-build actions
        DR_ACTIVATED = 'false'
    }

    options {
        // Keep only the last 5 successful builds and their logs
        buildDiscarder(logRotator(numToKeepStr: '5'))
        // Set a global timeout for the entire pipeline
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('üì• Clone Dev Repo') {
            steps {
                // Clone the development repository into a 'dev' subdirectory in the workspace
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üìÅ Clone Config Repo') {
            steps {
                // Clone the configuration repository into a 'config' subdirectory in the workspace
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üïµÔ∏è Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        // Check if there are any changes in the 'backend/' directory since the last commit
                        // git diff --name-only HEAD~1 HEAD gets files changed in the last commit
                        // grep -q checks silently if 'backend/' path is present
                        def backendChanged = sh(
                            script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
                            returnStatus: true // Return 0 for success (found changes), 1 for failure (no changes)
                        ) == 0

                        if (!backendChanged) {
                            echo "‚ö†Ô∏è No changes in backend code. Aborting..."
                            currentBuild.result = 'ABORTED' // Set build status to ABORTED
                            error("No changes in backend/") // Terminate pipeline with an error message
                        }
                    }
                }
            }
        }

        stage('üê≥ Build Docker Image') {
            steps {
                dir('dev') {
                    script {
                        echo "üì¶ Building image ${IMAGE_NAME}:${TAG}"
                        // Build the Docker image from the backend/Dockerfile
                        // The build context is 'backend' relative to the 'dev' directory
                        docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
                    }
                }
            }
        }

        stage('üöÄ Push to Docker Hub') {
            steps {
                // Use Docker Hub credentials securely
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        // Authenticate with Docker Hub registry
                        docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
                            // Push the image with the unique build tag
                            docker.image("${IMAGE_NAME}:${TAG}").push()
                            // Also push the same image with the 'latest' tag
                            docker.image("${IMAGE_NAME}:${TAG}").push("latest")
                        }
                    }
                }
            }
        }

        stage('‚úèÔ∏è Update Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        def filePath = "k8s/backend/deployment.yaml" // Path to the Kubernetes deployment YAML
                        def newImage = "${IMAGE_NAME}:${TAG}"       // The new image tag to update
                        echo "üîß Updating ${filePath} with new image: ${newImage}"

                        // Use 'sed' to replace the image tag in the deployment YAML
                        // Note: 'sed -i' behaves differently on macOS (BSD sed) vs. Linux (GNU sed).
                        // For portability, consider 'sed -i.bak' or platform-specific logic.
                        // Assuming GNU sed compatibility or a controlled environment.
                        sh """
                            sed -i 's|image:.*|image: ${newImage}|' ${filePath}
                        """
                        sh "cat ${filePath}" // Print the updated file content for verification
                    }
                }
            }
        }

        stage('üì§ Commit & Push Changes') {
            steps {
                dir('config') {
                    // Use GitHub personal access token for pushing changes
                    withCredentials([string(credentialsId: 'github-push-token', variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.email "rani.saed19@gmail.com"
                                git config user.name "Rani Saed (CI/CD)"
                                git add k8s/backend/deployment.yaml # Stage the updated deployment YAML

                                # Check if there are actual changes staged before committing
                                if ! git diff --cached --quiet; then
                                    git commit -m "üöÄ Update backend image to ${TAG}" # Commit with a descriptive message
                                    # Set the remote URL with the token for authentication
                                    git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                    git push origin main # Push changes to the main branch
                                else
                                    echo "No changes to commit"
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('‚ù§Ô∏è Health Check & Failover') {
            steps {
                script {
                    def maxAttempts = 5
                    def waitTime = 5
                    def healthyMainBackend = false
                    def healthyMainFrontend = false
                    env.DR_ACTIVATED = 'false' // Reset flag for this run

                    echo "üîç Checking main backend (Docker Compose) health at ${env.MAIN_BACKEND_HEALTH_URL}..."
                    for (int i = 1; i <= maxAttempts; i++) {
                        def healthCheckScript = "curl -s --max-time 5 ${env.MAIN_BACKEND_HEALTH_URL} 2>/dev/null | grep -q '\"status\":\"healthy\"' || true"
                        def healthCheckStatus = sh(
                            script: healthCheckScript,
                            returnStatus: true
                        )

                        if (healthCheckStatus == 0) {
                            echo "‚úÖ Main Backend (Docker Compose) is healthy on attempt ${i}!"
                            healthyMainBackend = true
                            break
                        } else {
                            echo "‚ùå Main Backend (Docker Compose) not yet healthy (attempt ${i})."
                            if (i < maxAttempts) {
                                sleep waitTime
                            }
                        }
                    }

                    echo "üîç Checking main frontend (Kubernetes via port-forward) health at ${env.MAIN_FRONTEND_HEALTH_URL}..."
                    for (int i = 1; i <= maxAttempts; i++) {
                        def frontendHealthScript = "curl -s -o /dev/null -w '%{http_code}' --max-time 5 ${env.MAIN_FRONTEND_HEALTH_URL} || true"
                        def frontendHealthStatus = sh(
                            script: frontendHealthScript,
                            returnStdout: true
                        ).trim()

                        if (frontendHealthStatus == '200') {
                            echo "‚úÖ Main Frontend (Kubernetes) is healthy on attempt ${i}!"
                            healthyMainFrontend = true
                            break
                        } else {
                            echo "‚ùå Main Frontend (Kubernetes) not yet healthy (HTTP ${frontendHealthStatus}, attempt ${i})."
                            if (i < maxAttempts) {
                                sleep waitTime
                            }
                        }
                    }

                    // --- Failover Logic ---
                    if (!healthyMainBackend || !healthyMainFrontend) {
                        echo "üö® Primary services are down. Activating DR procedures."
                        env.DR_ACTIVATED = 'true' // Set flag
                        currentBuild.result = 'UNSTABLE' // Mark build as unstable if primary is down

                        echo "Ensuring DR Backend (gogo-dr-backend) is up and healthy..."
                        def healthyDrBackend = false
                        timeout(time: maxAttempts * waitTime, unit: 'SECONDS') {
                            for (int i = 1; i <= maxAttempts; i++) {
                                def drBackendHealthScript = "curl -s --max-time 5 ${env.DR_BACKEND_HEALTH_URL} 2>/dev/null | grep -q '\"status\":\"healthy\"' || true"
                                def drBackendHealthStatus = sh(
                                    script: drBackendHealthScript,
                                    returnStatus: true
                                )
                                if (drBackendHealthStatus == 0) {
                                    echo "‚úÖ DR Backend is healthy on attempt ${i}!"
                                    healthyDrBackend = true
                                    break
                                } else {
                                    echo "‚ùå DR Backend not yet healthy (attempt ${i})."
                                    if (i < maxAttempts) {
                                        sleep waitTime
                                    }
                                }
                            }
                        }

                        if (!healthyDrBackend) {
                            error "Critical: DR Backend failed to become healthy after primary failure! Aborting failover."
                        } else {
                            echo "‚úÖ DR Backend is confirmed healthy."

                            // --- MODIFIED DOCKER EXEC COMMAND ---
                            // Removed -it (interactive TTY) and bash -c for non-interactive execution
                            echo "Executing data seeding on DR Backend (${env.DR_BACKEND_CONTAINER_NAME})..."
                            sh "docker exec ${env.DR_BACKEND_CONTAINER_NAME} python /app/seed.py"
                            echo "Data seeding on DR Backend completed."

                            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                                sh """
                                    curl -X POST -H 'Content-type: application/json' \
                                    --data '{"text": "üö® *Disaster Recovery Activated!* Main Backend/Frontend down. DR services (Backend: ${env.DR_BACKEND_HEALTH_URL}, Frontend: ${env.DR_FRONTEND_HEALTH_URL}) are active. Backend seeded."}' $SLACK_WEBHOOK
                                """
                            }

                            echo "‚ö†Ô∏è Failover complete. Manual intervention or external automation may be needed to re-route traffic to DR services."
                        }
                    } else {
                        echo "Primary services are healthy. No DR activation needed."
                    }
                }
            }
        }
    }

    // Post-build actions based on pipeline result
    post {
        success {
            // This 'success' block will run even if currentBuild.result is 'UNSTABLE' (from DR failover)
            // if no 'failure' or 'aborted' has occurred.
            // Check if DR was activated to send a specific message.
            script {
                if (env.DR_ACTIVATED == 'true') {
                    echo "‚úÖ Pipeline completed successfully, with DR activated."
                    // Specific DR success message was sent in the 'Health Check & Failover' stage.
                    // You could add another one here if preferred, or modify the in-stage one.
                } else {
                    echo "‚úÖ Backend image pushed and deployment updated."
                    withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                        sh """
                            curl -X POST -H 'Content-type: application/json' \
                            --data '{"text": "‚úÖ *Backend* CI/CD succeeded ‚Äî *${TAG}* deployed & healthy!"}' $SLACK_WEBHOOK
                        """
                    }
                }
            }
        }

        aborted {
            echo "‚èπÔ∏è Pipeline aborted (no backend changes)"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ö†Ô∏è *Backend* pipeline aborted ‚Äî no changes detected."}' $SLACK_WEBHOOK
                """
            }
        }

        failure {
            echo "‚ùå Pipeline failed"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ùå *Backend* pipeline failed. Check Jenkins logs."}' $SLACK_WEBHOOK
                """
            }
        }
    }
}