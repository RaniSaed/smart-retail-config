pipeline {
  agent any

  environment {
    IMAGE_NAME = 'rani19/backend'
    TAG = "build-${env.BUILD_NUMBER}"
    DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
    CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
    DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
    SLACK_CREDENTIAL_ID = 'slack-webhook'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    timeout(time: 20, unit: 'MINUTES')
  }

  stages {
    stage('üì• Clone Dev Repo') {
      steps {
        dir('dev') {
          git url: "${DEV_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('üìÅ Clone Config Repo') {
      steps {
        dir('config') {
          git url: "${CONFIG_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('üïµÔ∏è Check Backend Changes') {
      steps {
        dir('dev') {
          script {
            def backendChanged = sh(
              script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
              returnStatus: true
            ) == 0

            if (!backendChanged) {
              echo "‚ö†Ô∏è No changes in backend code. Aborting..."
              currentBuild.result = 'ABORTED'
              error("No changes in backend/")
            }
          }
        }
      }
    }

    stage('üê≥ Build Docker Image') {
      steps {
        dir('dev') {
          script {
            echo "üì¶ Building image ${IMAGE_NAME}:${TAG}"
            docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
          }
        }
      }
    }

    stage('üöÄ Push to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          script {
            docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
              docker.image("${IMAGE_NAME}:${TAG}").push()
              docker.image("${IMAGE_NAME}:${TAG}").push("latest")
            }
          }
        }
      }
    }

    stage('‚úèÔ∏è Update Deployment YAML') {
      steps {
        dir('config') {
          script {
            def filePath = "k8s/backend/deployment.yaml"
            def newImage = "${IMAGE_NAME}:${TAG}"
            echo "üîß Updating ${filePath} with new image: ${newImage}"
            sh "sed -i 's|image:.*|image: ${newImage}|' ${filePath}"
            sh "cat ${filePath}"
          }
        }
      }
    }

    stage('üì§ Commit & Push Changes') {
      steps {
        dir('config') {
          withCredentials([string(credentialsId: 'github-push-token', variable: 'GIT_TOKEN')]) {
            sh """
              git config user.email "rani.saed19@gmail.com"
              git config user.name "Rani Saed (CI/CD)"
              git add k8s/backend/deployment.yaml
              if ! git diff --cached --quiet; then
                git commit -m "üöÄ Update backend image to ${TAG}"
                git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                git push origin main
              else
                echo "No changes to commit"
              fi
            """
          }
        }
      }
    }

    stage('‚ù§Ô∏è Health Check (Main)') {
      steps {
        script {
          def maxAttempts = 10
          def waitTime = 5
          def healthy = false

          for (int i = 1; i <= maxAttempts; i++) {
            echo "üß™ Attempt ${i}: Checking http://localhost:5001/health..."
            def result = sh(script: "curl -s http://localhost:5001/health | grep -q '\"status\":\"healthy\"'", returnStatus: true)
            if (result == 0) {
              echo "‚úÖ Main Backend is healthy."
              healthy = true
              break
            } else {
              echo "‚ùå Not healthy yet..."
              sleep(waitTime)
            }
          }

          if (!healthy) {
            error "üö´ Backend failed health check after ${maxAttempts} attempts."
          }
        }
      }
    }

    stage('üõ°Ô∏è DR Failover & Sync') {
      steps {
        script {
          echo "üîç Checking if Main Frontend (3000) is UP..."
          def frontendUp = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:3000 || echo 000", returnStdout: true).trim()

          if (frontendUp != "200") {
            echo "üö® Main Frontend DOWN. Launching DR Frontend on port 3002..."
            sh "docker start gogo-dr-frontend || true"
          } else {
            echo "‚úÖ Main Frontend is UP"
          }

          echo "üîç Checking if Main Backend (5001) is UP..."
          def backendUp = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:5001/health || echo 000", returnStdout: true).trim()

          if (backendUp != "200") {
            echo "üö® Main Backend DOWN. Launching DR Backend..."
            sh "docker start gogo-dr-backend || true"

            echo "üå± Running seed.py inside DR Backend..."
            def seedStatus = sh(script: "docker exec gogo-dr-backend python /app/seed.py", returnStatus: true)
            if (seedStatus != 0) {
              echo "‚ö†Ô∏è Failed to run seed.py. You may want to verify manually."
            } else {
              echo "‚úÖ seed.py executed successfully."
            }
          } else {
            echo "‚úÖ Main Backend is UP"
          }
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Build + Deploy successful."
      withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
        sh """
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "‚úÖ *Backend* CI/CD successful ‚Äî build *${TAG}* deployed and verified."}' $SLACK_WEBHOOK
        """
      }
    }

    aborted {
      echo "üü° Build aborted ‚Äî No backend changes"
      withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
        sh """
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "‚ö†Ô∏è *Backend* pipeline aborted ‚Äî no changes to deploy."}' $SLACK_WEBHOOK
        """
      }
    }

    failure {
      echo "‚ùå Build failed"
      withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
        sh """
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "‚ùå *Backend* pipeline failed! Investigate Jenkins logs."}' $SLACK_WEBHOOK
        """
      }
    }
  }
}
