pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SLACK_CREDENTIAL_ID = 'slack-webhook'
        GITHUB_PUSH_TOKEN_ID = 'github-push-token'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {

        stage('📥 Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('📁 Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('🕵️ Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def changed = sh(
                            script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
                            returnStatus: true
                        ) == 0
                        if (!changed) {
                            echo "⚠️ No changes in backend/"
                            currentBuild.result = 'ABORTED'
                            error("No backend changes, aborting pipeline.")
                        }
                    }
                }
            }
        }

        stage('🐳 Build Docker Image') {
            steps {
                dir('dev') {
                    script {
                        docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
                    }
                }
            }
        }

        stage('🚀 Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${IMAGE_NAME}:${TAG}").push()
                            docker.image("${IMAGE_NAME}:${TAG}").push("latest")
                        }
                    }
                }
            }
        }

        stage('✏️ Update deployment.yaml') {
            steps {
                dir('config') {
                    script {
                        sh """
                            sed -i 's|image:.*|image: ${IMAGE_NAME}:${TAG}|' k8s/backend/deployment.yaml
                        """
                    }
                }
            }
        }

        stage('📤 Commit & Push Config Updates') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: "${GITHUB_PUSH_TOKEN_ID}", variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.email "rani.saed19@gmail.com"
                                git config user.name "Rani Saed (CI/CD)"
                                git add k8s/backend/deployment.yaml
                                if ! git diff --cached --quiet; then
                                    git commit -m "🚀 Update backend image to ${TAG}"
                                    git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                    git push origin main
                                else
                                    echo "No changes to commit."
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('✅ Health Check (via port-forward)') {
            steps {
                script {
                    echo "🚀 Starting port-forward for backend service..."

                    sh """
                        nohup kubectl port-forward service/backend 5000:5000 -n default > pf.log 2>&1 &
                        echo \$! > pf.pid
                        sleep 5
                    """

                    def success = false
                    for (int i = 1; i <= 5; i++) {
                        def res = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:5000/health", returnStdout: true).trim()
                        if (res == "200") {
                            echo "✅ Backend is healthy (HTTP 200)"
                            success = true
                            break
                        } else {
                            echo "❌ Attempt $i/5 failed (got $res), retrying in 3s..."
                            sleep 3
                        }
                    }

                    sh "kill \$(cat pf.pid) || true"

                    if (!success) {
                        error("❌ Health check failed at http://localhost:5000/health")
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ CI/CD pipeline succeeded!"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh '''
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "✅ *Backend* pipeline succeeded. Image: '"${IMAGE_NAME}:${TAG}"'"}' "$SLACK_WEBHOOK"
                '''
            }
        }

        aborted {
            echo "⚠️ Pipeline aborted (no changes)"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh '''
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "⚠️ *Backend* pipeline aborted — no code changes."}' "$SLACK_WEBHOOK"
                '''
            }
        }

        failure {
            echo "❌ CI/CD pipeline failed"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh '''
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "❌ *Backend* pipeline failed. Check Jenkins logs."}' "$SLACK_WEBHOOK"
                '''
            }
        }
    }
}
