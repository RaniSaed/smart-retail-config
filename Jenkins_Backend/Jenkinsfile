pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SLACK_CREDENTIAL_ID = 'slack-webhook'
    }

    

    stages {
        stage('üì• Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üìÅ Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üïµÔ∏è Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def backendChanged = sh(
                            script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
                            returnStatus: true
                        ) == 0

                        if (!backendChanged) {
                            echo "‚ö†Ô∏è No changes in backend code. Aborting..."
                            currentBuild.result = 'ABORTED'
                            error("No changes in backend/")
                        }
                    }
                }
            }
        }

        stage('üê≥ Build Docker Image') {
            steps {
                dir('dev') {
                    script {
                        echo "üì¶ Building image ${IMAGE_NAME}:${TAG}"
                        docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
                    }
                }
            }
        }

        stage('üöÄ Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${IMAGE_NAME}:${TAG}").push()
                            docker.image("${IMAGE_NAME}:${TAG}").push("latest")
                        }
                    }
                }
            }
        }

        stage('‚úèÔ∏è Update Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        def filePath = "k8s/backend/deployment.yaml"
                        def newImage = "${IMAGE_NAME}:${TAG}"
                        echo "üîß Updating ${filePath} with new image: ${newImage}"
                        sh "sed -i 's|image:.*|image: ${newImage}|' ${filePath}"
                        sh "cat ${filePath}"
                    }
                }
            }
        }

        stage('üì§ Commit & Push Changes') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: 'github-push-token', variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.email "rani.saed19@gmail.com"
                                git config user.name "Rani Saed (CI/CD)"
                                git add k8s/backend/deployment.yaml
                                if ! git diff --cached --quiet; then
                                    git commit -m "üöÄ Update backend image to ${TAG}"
                                    git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                    git push origin main
                                else
                                    echo "No changes to commit"
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('‚ù§Ô∏è Health Check') {
            steps {
                script {
                    echo "üîç Checking backend health..."
                    def maxAttempts = 15
                    def waitTime = 10
                    def healthy = false

                    for (int i = 1; i <= maxAttempts; i++) {
                        echo "Attempt ${i}/${maxAttempts}: Curling http://gogo-backend:5000/health..."
                        def healthCheckStatus = sh(
                            script: "curl -s http://gogo-backend:5000/health | grep -q '\"status\":\"healthy\"'",
                            returnStatus: true
                        )
                        if (healthCheckStatus == 0) {
                            echo "‚úÖ Backend is healthy on attempt ${i}!"
                            healthy = true
                            break
                        } else {
                            echo "‚ùå Backend not yet healthy."
                            if (i < maxAttempts) {
                                sleep waitTime
                            }
                        }
                    }

                    if (!healthy) {
                        error "‚ùå Backend health check failed after ${maxAttempts} attempts!"
                    }
                }
            }
        }

        ---
        stage('üõ°Ô∏è DR Failover & Sync') {
            steps {
                script {
                    echo "üîÑ **Restoring data from Kubernetes backend (5000) to Main Backend (5001)**..."
                    // This command assumes 'gogo-backend' is your main backend container name.
                    // It ensures data is synced before checking other services.
                    sh 'docker exec gogo-backend python /app/seed.py'

                    echo "üîç Checking if **Main Frontend container (gogo-frontend)** is running..."
                    def frontendRunning = sh(
                        script: "docker ps --filter 'name=gogo-main-frontend' --format '{{.Names}}'",
                        returnStdout: true
                    ).trim()

                    if (frontendRunning == 'gogo-frontend') {
                        echo "‚úÖ Main Frontend container (gogo-main-frontend) is running. Connecting DR Frontend to Main Backend (5001)."
                        // Ensure DR frontend is started if it wasn't already.
                        sh "docker start gogo-dr-frontend || true"
                        echo "Main Frontend (3000) is already active. No failover needed for frontend."
                    } else {
                        echo "üö® Main Frontend container (gogo-main-frontend) is **NOT** running. Launching DR Frontend (gogo-dr-frontend) (on 3002) and connecting it to Main Backend (5001)..."
                        sh "docker start gogo-dr-frontend || true"
                        // Add any specific commands here if gogo-dr-frontend needs explicit configuration to point to 5001
                        // For example, if it needs environment variables or a restart after config changes.
                    }

                    echo "üîç Checking if **Main Backend container (gogo-backend)** is running..."
                    def backendRunning = sh(
                        script: "docker ps --filter 'name=gogo-backend' --format '{{.Names}}'",
                        returnStdout: true
                    ).trim()

                    if (backendRunning == 'gogo-backend') {
                        echo "‚úÖ Main Backend container (gogo-backend) is running. No failover needed for backend."
                    } else {
                        echo "üö® Main Backend container (gogo-backend) is **NOT** running. Launching DR Backend (gogo-dr-backend) (on 5002) and seeding data..."
                        sh "docker start gogo-dr-backend || true"
                        echo "üå± Running seed.py inside DR Backend container (gogo-dr-backend) to sync data from Kubernetes backend (5000)..."
                        sh 'docker exec gogo-dr-backend python /app/seed.py'
                    }
                }
            }
        }
        ---
    }

    post {
        success {
            echo "‚úÖ Backend image pushed and deployment updated."
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚úÖ *Backend* CI/CD succeeded ‚Äî *${TAG}* deployed & healthy!"}' $SLACK_WEBHOOK
                """
            }
        }

        aborted {
            echo "‚èπÔ∏è Pipeline aborted (no backend changes)"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ö†Ô∏è *Backend* pipeline aborted ‚Äî no changes detected."}' $SLACK_WEBHOOK
                """
            }
        }

        failure {
            echo "‚ùå Pipeline failed"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ùå *Backend* pipeline failed. Check Jenkins logs."}' $SLACK_WEBHOOK
                """
            }
        }
    }
}