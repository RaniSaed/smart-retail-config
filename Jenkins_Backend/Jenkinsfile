pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SLACK_CREDENTIAL_ID = 'slack-webhook'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('📥 Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('📁 Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('🕵️ Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def backendChanged = sh(
                            script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
                            returnStatus: true
                        ) == 0

                        if (!backendChanged) {
                            echo "ℹ️ No changes in backend code. Skipping build..."
                            currentBuild.result = 'SUCCESS' // כדי לא לקבל ABORTED
                            return
                        }
                    }
                }
            }
        }

        stage('🐳 Build Docker Image') {
            steps {
                dir('dev') {
                    script {
                        echo "📦 Building image ${IMAGE_NAME}:${TAG}"
                        docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
                    }
                }
            }
        }

        stage('🚀 Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${IMAGE_NAME}:${TAG}").push()
                            docker.image("${IMAGE_NAME}:${TAG}").push("latest")
                        }
                    }
                }
            }
        }

        stage('✏️ Update Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        def filePath = "k8s/backend/deployment.yaml"
                        def newImage = "${IMAGE_NAME}:${TAG}"
                        echo "🔧 Updating ${filePath} with new image: ${newImage}"

                        sh """
                            sed -i 's|image:.*|image: ${newImage}|' ${filePath}
                        """
                        sh "cat ${filePath}"
                    }
                }
            }
        }

        stage('📤 Commit & Push Changes') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: 'github-push-token', variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.email "rani.saed19@gmail.com"
                                git config user.name "Rani Saed (CI/CD)"
                                git add k8s/backend/deployment.yaml

                                if ! git diff --cached --quiet; then
                                    git commit -m "🚀 Update backend image to ${TAG}"
                                    git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                    git push origin main
                                else
                                    echo "No changes to commit"
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('✅ Validate Primary Health') {
            steps {
                script {
                    echo "🔍 Validating backend health via temporary port-forward..."

                    sh "kubectl port-forward service/backend 5000:5000 -n default > /tmp/jenkins-portforward.log 2>&1 & echo \$! > /tmp/jenkins-backend.pid"

                    timeout(time: 15, unit: 'SECONDS') {
                        waitUntil {
                            script {
                                return sh(script: "grep -m1 'Forwarding from' /tmp/jenkins-portforward.log", returnStatus: true) == 0
                            }
                        }
                    }

                    def maxRetries = 5
                    def delay = 5
                    def success = false

                    for (int i = 1; i <= maxRetries; i++) {
                        def response = sh(
                            script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:5000/api/products || echo '000'",
                            returnStdout: true
                        ).trim()

                        if (response == "200") {
                            echo "✅ Backend is healthy (HTTP 200)"
                            success = true
                            break
                        } else {
                            echo "🔁 Attempt ${i}/${maxRetries}: Got ${response}, retrying in ${delay}s..."
                            sleep delay
                        }
                    }

                    sh "kill \$(cat /tmp/jenkins-backend.pid) || true"

                    if (!success) {
                        error("❌ Backend health check failed after ${maxRetries} attempts.")
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Backend image pushed and deployment updated."
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh(
                    script: 'curl -X POST -H "Content-type: application/json" --data \'{"text": "✅ *Backend* CI/CD succeeded — *' + TAG + '* deployed."}\' "$SLACK_WEBHOOK"',
                    label: 'Notify Slack (Success)'
                )
            }
        }

        aborted {
            echo "⏹️ Pipeline aborted (manual)"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh(
                    script: 'curl -X POST -H "Content-type: application/json" --data \'{"text": "⚠️ *Backend* pipeline was manually aborted."}\' "$SLACK_WEBHOOK"',
                    label: 'Notify Slack (Aborted)'
                )
            }
        }

        failure {
            echo "❌ Pipeline failed"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh(
                    script: 'curl -X POST -H "Content-type: application/json" --data \'{"text": "❌ *Backend* pipeline failed. Check Jenkins logs."}\' "$SLACK_WEBHOOK"',
                    label: 'Notify Slack (Failure)'
                )
            }
        }
    }
}
