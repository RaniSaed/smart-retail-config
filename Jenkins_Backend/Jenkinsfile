pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        GITHUB_PUSH_TOKEN_ID = 'github-token'
        SLACK_CREDENTIAL_ID = 'slack-webhook'
        PRIMARY_BACKEND_HEALTH_ENDPOINT = 'http://localhost:5000/health'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {

        stage('üì• Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üì• Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üïµÔ∏è Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def changed = sh(
                            script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
                            returnStatus: true
                        ) == 0
                        if (!changed) {
                            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                                sh """
                                    curl -X POST -H 'Content-type: application/json' \
                                    --data '{\"text\": \"‚ö†Ô∏è *Backend* pipeline aborted ‚Äî no changes detected.\"}' \
                                    \$SLACK_WEBHOOK
                                """
                            }
                            currentBuild.result = 'ABORTED'
                            error("No backend changes detected.")
                        }
                    }
                }
            }
        }

        stage('üê≥ Build Docker Image') {
            steps {
                dir('dev/backend') {
                    script {
                        docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
                            def image = docker.build("${IMAGE_NAME}:${TAG}")
                            image.push()
                            image.push('latest')
                        }
                    }
                }
            }
        }

        stage('üìù Update Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        sh """
                            sed -i 's|image: ${IMAGE_NAME}:.*|image: ${IMAGE_NAME}:${TAG}|' k8s/backend/deployment.yaml
                        """
                    }
                }
            }
        }

        stage('üì§ Commit & Push Config Updates') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: "${GITHUB_PUSH_TOKEN_ID}", variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.email "rani.saed19@gmail.com"
                                git config user.name "Rani Saed (CI/CD)"
                                git add k8s/backend/deployment.yaml

                                if ! git diff --cached --quiet; then
                                    git commit -m "üöÄ Update backend image to ${TAG}"
                                    git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                    git push origin main
                                else
                                    echo "‚ö†Ô∏è No changes to commit"
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('ü©∫ Health Check') {
            steps {
                script {
                    def statusCode = sh(
                        script: "curl -s -o /dev/null -w '%{http_code}' ${PRIMARY_BACKEND_HEALTH_ENDPOINT}",
                        returnStdout: true
                    ).trim()
                    if (statusCode != '200') {
                        error("‚ùå Health check failed with status code: ${statusCode}")
                    } else {
                        echo "‚úÖ Backend is healthy (HTTP 200)"
                    }
                }
            }
        }

        stage('üì¢ Slack Success Notification') {
            steps {
                withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                    sh """
                        curl -X POST -H 'Content-type: application/json' \
                        --data '{\"text\": \"‚úÖ *Backend* pipeline succeeded! Image: ${IMAGE_NAME}:${TAG}\"}' \
                        \$SLACK_WEBHOOK
                    """
                }
            }
        }
    }

    post {
        failure {
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{\"text\": \"‚ùå *Backend* pipeline failed. Check Jenkins logs.\"}' \
                    \$SLACK_WEBHOOK
                """
            }
        }
    }
}
