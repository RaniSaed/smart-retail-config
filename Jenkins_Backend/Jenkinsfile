pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'

        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SLACK_CREDENTIAL_ID = 'slack-webhook'
        GITHUB_CREDENTIAL_ID = 'github-push-token'
        ARGOCD_CREDS_ID = 'argocd-admin-password'

        // --- NEW: ArgoCD Server Address Variable ---
        // Based on 'kubectl get svc -n argocd' output for 'argocd-server' service
        // Using internal cluster DNS and port 80 for HTTP access (due to --insecure)
        ARGOCD_SERVER_ADDRESS = 'argocd-server.argocd.svc.cluster.local:80' // <--- Updated based on your output
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage('üì• Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üìÅ Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üïµÔ∏è Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def changed = sh(script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'", returnStatus: true) == 0
                        if (!changed) {
                            echo "‚ö†Ô∏è No changes in backend code. Aborting..."
                            currentBuild.result = 'ABORTED'
                            error("No backend changes.")
                        }
                    }
                }
            }
        }

        stage('üê≥ Build Docker Image') {
            steps {
                dir('dev') {
                    script {
                        docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
                    }
                }
            }
        }

        stage('üöÄ Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                            docker.image("${IMAGE_NAME}:${TAG}").push()
                            docker.image("${IMAGE_NAME}:${TAG}").push("latest")
                        }
                    }
                }
            }
        }

        stage('‚úèÔ∏è Update Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        def path = "k8s/backend/deployment.yaml"
                        sh "sed -i 's|image:.*|image: ${IMAGE_NAME}:${TAG}|' ${path}"
                        sh "cat ${path}"
                    }
                }
            }
        }

        stage('üì§ Commit & Push Changes') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: GITHUB_CREDENTIAL_ID, variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.name "Rani Saed (CI/CD)"
                                git config user.email "rani.saed19@gmail.com"
                                git add k8s/backend/deployment.yaml
                                
                                if ! git diff --cached --quiet; then
                                    git commit -m "üöÄ Update backend image to ${TAG}"
                                    git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                    git push origin main
                                else
                                    echo "‚ÑπÔ∏è No changes to commit"
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('üåç Deploy to DR Region') {
            steps {
                withCredentials([string(credentialsId: ARGOCD_CREDS_ID, variable: 'ARGO_PASS')]) {
                    script {
                        echo "üöÄ Deploying backend to DR via ArgoCD..."
                        // Pass password securely via stdin using 'read -s' to avoid Groovy interpolation warning
                        sh """
                            argocd login ${ARGOCD_SERVER_ADDRESS} --username admin --grpc-web --insecure <<EOF
                            ${ARGO_PASS}
                            EOF
                        """
                        sh "argocd app sync dr-backend-app --grpc-web"
                    }
                }
            }
        }

        stage('üß™ DR Failover Test') {
            steps {
                echo "üîÅ Starting DR failover test..."
                sh 'chmod +x dev/scripts/failover-check.sh'
                sh 'nohup bash dev/scripts/failover-check.sh > dev/failover.log 2>&1 &'
            }
        }

        stage('üìÑ DR Report') {
            steps {
                echo "üìù Saving DR report..."
                sh 'echo "‚úÖ DR Success - $(date)" >> dev/failover.log'
                archiveArtifacts artifacts: 'dev/failover.log', fingerprint: true
            }
        }
    }

    post {
        success {
            echo "‚úÖ Success"
            withCredentials([string(credentialsId: SLACK_CREDENTIAL_ID, variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚úÖ *Backend* CI/CD succeeded ‚Äî *${TAG}* deployed with DR."}' $SLACK_WEBHOOK
                """
            }
        }

        aborted {
            echo "‚ö†Ô∏è Pipeline aborted"
            withCredentials([string(credentialsId: SLACK_CREDENTIAL_ID, variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ö†Ô∏è *Backend* pipeline aborted ‚Äî no backend changes."}' $SLACK_WEBHOOK
                """
            }
        }

        failure {
            echo "‚ùå Failure"
            withCredentials([string(credentialsId: SLACK_CREDENTIAL_ID, variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ùå *Backend* pipeline failed. Check Jenkins logs."}' $SLACK_WEBHOOK
                """
            }
        }
    }
}
