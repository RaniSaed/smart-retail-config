pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SLACK_CREDENTIAL_ID = 'slack-webhook'
        ARGOCD_SERVER = 'http://localhost:8080' // ◊û◊©◊™◊†◊î ◊©◊™◊©◊™◊û◊© ◊ë◊ï ◊ë◊©◊ú◊ë◊ô◊ù ◊î◊ë◊ê◊ô◊ù
        PRIMARY_BACKEND_HEALTH_ENDPOINT = 'http://localhost:5000/health'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 20, unit: 'MINUTES')
        skipDefaultCheckout(true)
    }

    stages {
        stage('üì• Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üìÅ Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üïµÔ∏è Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def changed = sh(
                            script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
                            returnStatus: true
                        ) == 0
                        if (!changed) {
                            withCredentials([string(credentialsId: SLACK_CREDENTIAL_ID, variable: 'WEBHOOK_URL')]) {
                                sh '''
                                    curl -X POST -H "Content-type: application/json" \
                                    --data '{"text": "‚ö†Ô∏è *Backend* pipeline aborted ‚Äî no changes detected."}' \
                                    "$WEBHOOK_URL"
                                '''
                            }
                            currentBuild.result = 'ABORTED'
                            error("No changes in backend code. Pipeline aborted.")
                        }
                    }
                }
            }
        }

        stage('üê≥ Docker Build & Push') {
            steps {
                dir('dev/backend') {
                    script {
                        docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
                            def image = docker.build("${IMAGE_NAME}:${TAG}")
                            image.push()
                            image.push('latest')
                        }
                    }
                }
            }
        }

        stage('üì¶ Update Deployment YAML') {
            steps {
                dir('config/k8s/backend') {
                    script {
                        sh "sed -i 's|image: ${IMAGE_NAME}:.*|image: ${IMAGE_NAME}:${TAG}|' deployment.yaml"
                    }
                }
            }
        }

        stage('üì§ Commit & Push Config Updates') {
            steps {
                dir('config') {
                    script {
                        sh """
                            git config user.name "Admin"
                            git config user.email "Rani.saed19@gmail.com"
                            git add .
                            git commit -m "Update backend image to ${TAG}" || echo "No changes to commit"
                            git push origin main
                        """
                    }
                }
            }
        }

        stage('‚úÖ Health Check') {
            steps {
                script {
                    retry(5) {
                        sleep 5
                        def response = sh(
                            script: "curl -s -o /dev/null -w '%{http_code}' ${PRIMARY_BACKEND_HEALTH_ENDPOINT}",
                            returnStdout: true
                        ).trim()
                        if (response != "200") {
                            error "Health check failed with status code ${response}"
                        }
                    }
                }
            }
        }

        stage('‚úÖ Success Notification') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                withCredentials([string(credentialsId: SLACK_CREDENTIAL_ID, variable: 'WEBHOOK_URL')]) {
                    sh '''
                        curl -X POST -H "Content-type: application/json" \
                        --data '{"text": "‚úÖ *Backend* pipeline succeeded!"}' \
                        "$WEBHOOK_URL"
                    '''
                }
            }
        }
    }

    post {
        failure {
            withCredentials([string(credentialsId: SLACK_CREDENTIAL_ID, variable: 'WEBHOOK_URL')]) {
                sh '''
                    curl -X POST -H "Content-type: application/json" \
                    --data '{"text": "‚ùå *Backend* pipeline failed. Check Jenkins logs."}' \
                    "$WEBHOOK_URL"
                '''
            }
        }
    }
}
