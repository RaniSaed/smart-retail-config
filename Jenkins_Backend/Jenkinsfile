pipeline {
  agent any

  environment {
    IMAGE_NAME = 'rani19/backend'
    TAG = "build-${env.BUILD_NUMBER}"
    DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
    CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
    DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
    SLACK_WEBHOOK = credentials('slack-webhook')
    GIT_CREDENTIALS_ID = 'github-token'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    timeout(time: 20, unit: 'MINUTES')
  }

  stages {

    stage('👋 Start') {
      steps {
        echo "🚀 Pipeline started for: ${IMAGE_NAME}:${TAG}"
      }
    }

    stage('📥 Clone Dev Repo') {
      steps {
        dir('dev') {
          git url: "${DEV_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('📥 Clone Config Repo') {
      steps {
        dir('config') {
          git url: "${CONFIG_REPO_URL}", branch: 'main', credentialsId: "${GIT_CREDENTIALS_ID}"
        }
      }
    }

    stage('🔍 Check Backend Changes') {
      steps {
        dir('dev') {
          script {
            def changed = sh(
              script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
              returnStatus: true
            ) == 0

            if (!changed) {
              echo "⚠️ No changes in backend code. Skipping build..."
              currentBuild.result = 'ABORTED'
              error("No backend changes to build.")
            }
          }
        }
      }
    }

    stage('🐳 Build Docker Image') {
      steps {
        dir('dev/backend') {
          script {
            sh "docker build -t ${IMAGE_NAME}:${TAG} ."
          }
        }
      }
    }

    stage('📤 Push to Docker Hub') {
      steps {
        script {
          docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
            sh "docker tag ${IMAGE_NAME}:${TAG} ${IMAGE_NAME}:latest"
            sh "docker push ${IMAGE_NAME}:${TAG}"
            sh "docker push ${IMAGE_NAME}:latest"
          }
        }
      }
    }

    stage('📝 Update Deployment YAML') {
      steps {
        dir('config/k8s/backend') {
          script {
            sh "sed -i 's|image: ${IMAGE_NAME}:.*|image: ${IMAGE_NAME}:${TAG}|' deployment.yaml"
          }
        }
      }
    }

    stage('✅ Commit & Push Changes') {
      steps {
        dir('config') {
          script {
            sh 'git config user.name "Jenkins"'
            sh 'git config user.email "jenkins@example.com"'
            sh 'git add .'
            sh 'git commit -m "🚀 Update backend image to tag ${TAG}" || echo "No changes to commit"'
            sh 'git push origin main'
          }
        }
      }
    }

    stage('✅ Validate Primary Health') {
      steps {
        script {
          echo "🔍 Checking primary backend health via port-forward..."

          def pfProcess = sh(
            script: "kubectl port-forward svc/backend 5002:5000 -n default > /dev/null 2>&1 & echo \$!",
            returnStdout: true
          ).trim()

          sleep 5

          try {
            def response = sh(
              script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:5002/api/products",
              returnStdout: true
            ).trim()

            if (response != '200') {
              error("❌ Backend health check failed. HTTP $response")
            }
            echo "✅ Backend is healthy! HTTP $response"
          } finally {
            sh "kill ${pfProcess} || true"
          }
        }
      }
    }

    stage('🚀 Deploy to DR Region') {
      steps {
        echo "🗺️ Deploying to DR Region (ArgoCD will detect new image)"
      }
    }

    stage('✅ Validate DR Health') {
      steps {
        echo "🔎 Add curl check for DR later"
      }
    }

    stage('⚡ Failover Test') {
      steps {
        echo "🧪 You can trigger failover-check.sh externally"
      }
    }

    stage('📊 Generate DR Readiness Report') {
      steps {
        echo "📄 You can generate report here"
      }
    }
  }

  post {
    failure {
      script {
        sh """
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text": "❌ *Backend* pipeline failed. Check Jenkins logs."}' ${SLACK_WEBHOOK}
        """
      }
    }
    success {
      script {
        sh """
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text": "✅ *Backend* pipeline succeeded. Image: ${IMAGE_NAME}:${TAG}"}' ${SLACK_WEBHOOK}
        """
      }
    }
  }
}
