pipeline {
  agent any

  environment {
    IMAGE_NAME = 'rani19/backend'
    TAG = "build-${env.BUILD_NUMBER}"
    DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
    CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
    DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
    SLACK_CREDENTIAL_ID = 'slack-webhook'
    GITHUB_TOKEN = credentials('github-push-token') 
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    timeout(time: 20, unit: 'MINUTES')
  }

  stages {
    stage('üì• Clone Dev Repo') {
      steps {
        dir('dev') {
          git url: "${DEV_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('üïµÔ∏è Check Backend Changes') {
      steps {
        dir('dev') {
          script {
            def backendChanged = sh(
              script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
              returnStatus: true
            ) == 0

            if (!backendChanged) {
              echo "‚ö†Ô∏è No changes in backend code. Aborting..."
              currentBuild.result = 'ABORTED'
              error("No changes in backend/")
            }
          }
        }
      }
    }

    stage('üê≥ Build Docker Image') {
      steps {
        dir('dev') {
          script {
            echo "üì¶ Building image ${IMAGE_NAME}:${TAG}"
            docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
          }
        }
      }
    }

    stage('üöÄ Push to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          script {
            docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
              docker.image("${IMAGE_NAME}:${TAG}").push()
              docker.image("${IMAGE_NAME}:${TAG}").push("latest")
            }
          }
        }
      }
    }

    stage('üõ†Ô∏è Update Deployment File') {
      steps {
        dir('config') {
          git url: "${CONFIG_REPO_URL}", branch: 'main'

          script {
            def file = "k8s/backend/deployment.yaml"
            def fileContent = readFile(file)
            def updated = fileContent.replaceAll(/image: .*/, "image: ${IMAGE_NAME}:${TAG}")
            writeFile file: file, text: updated

            sh 'git config user.email "jenkins@example.com"'
            sh 'git config user.name "Jenkins CI"'
            sh "git add ${file}"

            sh '''
              if ! git diff --cached --quiet; then
                git commit -m "ü§ñ Update backend image to version ${TAG}"
                git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/RaniSaed/smart-retail-config.git
                git push origin main
              else
                echo "No changes to commit"
              fi
            '''
          }
        }
      }
    }

    stage('üßπ Clean Up Old Docker Images') {
      steps {
        script {
          sh '''
            echo "Cleaning up old Docker images..."
            docker images --filter=reference='rani19/backend:*' --format '{{.Repository}}:{{.Tag}}' | grep -v latest | sort | head -n -2 | xargs -r docker rmi || true
          '''
        }
      }
    }
  }

  post {
    success {
      script {
        echo "‚úÖ Backend image pushed: ${IMAGE_NAME}:${TAG}"
        withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
          sh """
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text": "‚úÖ Backend Build Success ‚Äî Image *${IMAGE_NAME}:${TAG}* pushed and deployment.yaml updated."}' $SLACK_WEBHOOK
          """
        }
      }
    }
    aborted {
      script {
        echo "‚èπÔ∏è Pipeline aborted (no backend changes)"
        withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
          sh """
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text": "‚ö†Ô∏è Jenkins Backend Pipeline Aborted ‚Äî No changes in backend/."}' $SLACK_WEBHOOK
          """
        }
      }
    }
    failure {
      script {
        echo "‚ùå Pipeline failed"
        withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
          sh """
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text": "‚ùå Backend Build Failed ‚Äî Check Jenkins logs for details."}' $SLACK_WEBHOOK
          """
        }
      }
    }
    always {
      script {
        echo "üßΩ Clean workspace"
      }
    }
  }
}
