pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        GITHUB_PUSH_TOKEN_ID = 'github-push-token'

        // Health URLs
        HOST_BACKEND_HEALTH_URL = 'http://localhost:5000/health'
        MAIN_CONTAINER_BACKEND_HEALTH_URL = 'http://localhost:5001/health'
        DR_BACKEND_HEALTH_URL = 'http://localhost:5002/health'
        MAIN_FRONTEND_HEALTH_URL = 'http://localhost:3000'
        DR_FRONTEND_HEALTH_URL = 'http://localhost:3002'

        // Container names
        MAIN_CONTAINER_BACKEND_NAME = 'gogo-backend'
        DR_BACKEND_CONTAINER_NAME = 'gogo-dr-backend'
        DR_FRONTEND_CONTAINER_NAME = 'gogo-dr-frontend'

        // Slack
        SLACK_CREDENTIAL_ID = 'slack-webhook'
        SLACK_CHANNEL = '#devops-alerts'

        HEALTH_CHECK_MAX_ATTEMPTS = 10
        HEALTH_CHECK_WAIT_TIME_SECONDS = 5
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 25, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {
        stage('📥 Clone Dev Repo') {
            steps {
                cleanWs()
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('📁 Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('🕵️ Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def changed = sh(script: "git diff --name-only HEAD~1 HEAD | grep '^backend/' || true", returnStatus: true) == 0
                        if (!changed) {
                            echo "⚠️ No changes in backend/"
                            currentBuild.result = 'ABORTED'
                            error("Nothing to build")
                        }
                    }
                }
            }
        }

        stage('🐳 Build & Push Docker Image') {
            steps {
                dir('dev') {
                    script {
                        docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
                    }
                }

                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${IMAGE_NAME}:${TAG}").push()
                            docker.image("${IMAGE_NAME}:${TAG}").push("latest")
                        }
                    }
                }
            }
        }

        stage('✏️ Update Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        def file = "k8s/backend/deployment.yaml"
                        sh "sed -i 's|image:.*|image: ${IMAGE_NAME}:${TAG}|' ${file}"
                    }
                }
            }
        }

        stage('📤 Commit & Push Changes') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: "${GITHUB_PUSH_TOKEN_ID}", variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.email 'rani.saed19@gmail.com'
                                git config user.name 'Rani Saed (CI/CD)'
                                git add k8s/backend/deployment.yaml
                                git commit -m '🚀 Update backend image to ${TAG}' || echo 'No changes'
                                git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                git push origin main || echo 'Nothing to push'
                            """
                        }
                    }
                }
            }
        }

        stage('❤️ Health Check & DR') {
            steps {
                script {
                    def isHealthy = { name, url ->
                        def attempts = 0
                        while (attempts < HEALTH_CHECK_MAX_ATTEMPTS.toInteger()) {
                            def code = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${url} || true", returnStdout: true).trim()
                            if (code == "200") {
                                echo "✅ ${name} is healthy"
                                return true
                            }
                            echo "⏳ ${name} not ready (code: ${code}), retrying..."
                            sleep HEALTH_CHECK_WAIT_TIME_SECONDS.toInteger()
                            attempts++
                        }
                        return false
                    }

                    def backendUp = isHealthy("Main Backend", HOST_BACKEND_HEALTH_URL)
                    if (backendUp) {
                        echo "Running seed.py to sync data into container backend..."
                        sh "docker exec -i ${MAIN_CONTAINER_BACKEND_NAME} bash -c 'python /app/seed.py'"
                    }

                    def frontendUp = isHealthy("Main Frontend", MAIN_FRONTEND_HEALTH_URL)
                    def mainContainerBackendUp = isHealthy("Main Container Backend", MAIN_CONTAINER_BACKEND_HEALTH_URL)

                    if (!backendUp || !frontendUp) {
                        echo "🚨 DR mode activated - starting DR services..."
                        sh "docker start ${DR_BACKEND_CONTAINER_NAME} || true"
                        sh "docker start ${DR_FRONTEND_CONTAINER_NAME} || true"

                        def drBackendUp = isHealthy("DR Backend", DR_BACKEND_HEALTH_URL)
                        def drFrontendUp = isHealthy("DR Frontend", DR_FRONTEND_HEALTH_URL)

                        if (!drBackendUp || !drFrontendUp) {
                            error "❌ DR services failed to become healthy"
                        }

                        echo "✅ DR services are healthy and running"
                    } else {
                        echo "✅ No need for DR - all primary services are up"
                        if (!mainContainerBackendUp) {
                            error "⚠️ Primary container backend unhealthy"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "🎉 Pipeline succeeded"
        }

        failure {
            echo "❌ Pipeline failed"
        }

        aborted {
            echo "⏹️ Pipeline aborted (nothing to build)"
        }

        always {
            cleanWs()
        }
    }
}
