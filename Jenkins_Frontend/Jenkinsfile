pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/gogo-main-frontend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SLACK_WEBHOOK = credentials('slack-webhook')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {

        stage('üì• Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üìÅ Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üîç Check Frontend Changes') {
            steps {
                dir('dev') {
                    script {
                        def changed = sh(
                            script: "git diff --name-only HEAD~1 HEAD | grep -q '^frontend/'",
                            returnStatus: true
                        ) == 0

                        if (!changed) {
                            echo "‚ö†Ô∏è No changes in frontend code. Aborting..."
                            currentBuild.result = 'ABORTED'
                            error("No changes in frontend/")
                        }
                    }
                }
            }
        }

        stage('üê≥ Build Docker Image') {
            steps {
                dir('dev') {
                    script {
                        echo "üì¶ Building image ${IMAGE_NAME}:${TAG}"
                        docker.build("${IMAGE_NAME}:${TAG}", "-f frontend/Dockerfile frontend")
                    }
                }
            }
        }

        stage('üì§ Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${IMAGE_NAME}:${TAG}").push()
                            docker.image("${IMAGE_NAME}:${TAG}").push("latest")
                        }
                    }
                }
            }
        }

        stage('‚úèÔ∏è Update Frontend Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        def filePath = "k8s/frontend/deployment.yaml"
                        def newImage = "${IMAGE_NAME}:${TAG}"
                        echo "üîß Updating ${filePath} with new image: ${newImage}"

                        sh """
                            sed -i 's|image:.*|image: ${newImage}|' ${filePath}
                        """
                        sh "cat ${filePath}"
                    }
                }
            }
        }

        stage('üì§ Commit & Push Changes') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: 'github-push-token', variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.email "rani.saed19@gmail.com"
                                git config user.name "Rani Saed (CI/CD)"
                                git add k8s/frontend/deployment.yaml

                                if ! git diff --cached --quiet; then
                                    git commit -m "üöÄ Update frontend image to ${TAG}"
                                    git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                    git push origin main
                                else
                                    echo "No changes to commit"
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('üì£ Notify Slack') {
            steps {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚úÖ *Frontend* CI/CD succeeded ‚Äî *${TAG}* deployed."}' \
                    ${SLACK_WEBHOOK}
                """
            }
        }
    }

    post {
        aborted {
            echo "‚èπÔ∏è Pipeline aborted (no frontend changes)"
            sh """
                curl -X POST -H 'Content-type: application/json' \
                --data '{"text": "‚ö†Ô∏è *Frontend Build Aborted* ‚Äî No code changes detected."}' \
                ${SLACK_WEBHOOK}
            """
        }
        failure {
            echo "‚ùå Pipeline failed"
            sh """
                curl -X POST -H 'Content-type: application/json' \
                --data '{"text": "‚ùå *Frontend Build Failed* ‚Äî Check Jenkins pipeline for errors."}' \
                ${SLACK_WEBHOOK}
            """
        }
    }
}
