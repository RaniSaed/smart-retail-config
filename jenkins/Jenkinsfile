pipeline {
  agent any

  environment {
    IMAGE_NAME = 'rani19/backend'
    TAG = "build-${env.BUILD_NUMBER}"
    DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
    DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
    CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
    PRIMARY_NS = 'default'
    DR_NS = 'dr-region'
    KUBECONFIG = '/var/jenkins_home/.kube/config'
  }

  stages {
    stage('Clone Dev Repo') {
      steps {
        echo 'üì• Cloning smart-retail-dev repository...'
        dir('dev') {
          git url: "${DEV_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('Clone Config Repo') {
      steps {
        echo 'üìÅ Cloning smart-retail-config repository...'
        dir('config') {
          git url: "${CONFIG_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        echo "üê≥ Building Docker image: ${IMAGE_NAME}:${TAG}"
        dir('dev/backend') {
          script {
            docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
              def image = docker.build("${IMAGE_NAME}:${TAG}")
              image.push()
              image.push('latest')
            }
          }
        }
      }
    }

    stage('Deploy to Primary') {
      steps {
        echo 'üöÄ Deploying to primary region...'
        dir('config/k8s') {
          sh "kubectl apply -f . -n ${PRIMARY_NS}"
        }
      }
    }

    stage('Validate Primary Deployment') {
      steps {
        echo 'üîç Validating primary health...'
        sh "kubectl get pods -n ${PRIMARY_NS}"
        sh "kubectl get svc -n ${PRIMARY_NS}"
      }
    }

    stage('Deploy to DR Region') {
      steps {
        echo 'üåç Deploying to secondary (DR) region...'
        sh "kubectl create namespace ${DR_NS} || true"
        sh "kubectl apply -f config/k8s -n ${DR_NS}"
      }
    }

    stage('Run Failover Test') {
      steps {
        echo 'üî• Running failover test on DR...'
        sh "kubectl rollout status deployment/backend -n ${DR_NS}"
      }
    }

    stage('Generate DR Report') {
      steps {
        echo 'üìä Generating DR readiness report...'
        sh """
          kubectl get pods -n ${DR_NS} > report.txt
          kubectl get svc -n ${DR_NS} >> report.txt
        """
        archiveArtifacts artifacts: 'report.txt'
      }
    }
  }

  post {
    success {
      echo '‚úÖ Full CI/CD pipeline completed successfully!'
    }
    failure {
      echo '‚ùå Pipeline failed. Check logs.'
    }
  }
}
