pipeline {
  agent any

  environment {
    IMAGE_NAME = 'rani19/backend'
    TAG = "build-${env.BUILD_NUMBER}"
    DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
    DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
    CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
    PRIMARY_NS = 'default'
    KUBECONFIG = '/root/.kube/config'
  }

  options {
    skipStagesAfterUnstable()
    disableConcurrentBuilds()
  }

  stages {

    stage('👋 Start Pipeline') {
      steps {
        echo "🔧 Starting Jenkins CI/CD pipeline for build #${env.BUILD_NUMBER}"
      }
    }

    stage('📥 Clone Repositories') {
      parallel {
        stage('📦 Clone Dev Repo') {
          steps {
            dir('dev') {
              git url: "${DEV_REPO_URL}", branch: 'main'
            }
          }
        }

        stage('🛠️ Clone Config Repo') {
          steps {
            dir('config') {
              git url: "${CONFIG_REPO_URL}", branch: 'main'
            }
          }
        }
      }
    }

    stage('🧹 Lint Backend') {
      steps {
        dir('dev/backend') {
          sh '''
            echo "🔍 Running flake8..."
            pip install --break-system-packages flake8 > /dev/null || true
            flake8 . || true
          '''
        }
      }
    }

    stage('✅ Unit Tests') {
      steps {
        dir('dev/backend') {
          sh '''
            echo "🧪 Installing dependencies and running unit tests..."
            pip install --break-system-packages -r requirements.txt > /dev/null || true
            python3 -m unittest discover -s tests || true
          '''
        }
      }
    }

    stage('🐳 Build & Push Docker Image') {
      steps {
        dir('dev/backend') {
          withCredentials([usernamePassword(
            credentialsId: "${DOCKER_CREDENTIALS_ID}",
            usernameVariable: 'DOCKER_USER',
            passwordVariable: 'DOCKER_PASS'
          )]) {
            sh '''
              echo "🔐 Logging in to Docker Hub..."
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

              echo "🛠️ Building image: $IMAGE_NAME:$TAG"
              docker build -t $IMAGE_NAME:$TAG .

              echo "📤 Pushing image to Docker Hub..."
              docker push $IMAGE_NAME:$TAG

              echo "✅ Docker image pushed: $IMAGE_NAME:$TAG"
            '''
          }
        }
      }
    }
  }

  post {
    success {
      echo "🎉 Build #${env.BUILD_NUMBER} completed successfully and image was pushed!"
    }
    failure {
      echo "❌ Build #${env.BUILD_NUMBER} failed. Check logs for details."
    }
    always {
      echo "📦 Pipeline finished with status: ${currentBuild.currentResult}"
    }
  }
}
