pipeline {
  agent any

  environment {
    IMAGE_NAME = 'rani19/backend'
    TAG = "build-${env.BUILD_NUMBER}"
    DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
    DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
    CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
    PRIMARY_NS = 'default'
    KUBECONFIG = '/root/.kube/config'
  }

  stages {

    stage('Clone Config Repo') {
      steps {
        echo 'üìÅ Cloning smart-retail-config repository...'
        checkout([
          $class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: "${CONFIG_REPO_URL}"]]
        ])
      }
    }

    stage('Clone Dev Repo') {
      steps {
        echo 'üì• Cloning smart-retail-dev repository...'
        dir('dev') {
          git url: "${DEV_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('Lint Backend Code') {
      steps {
        echo 'üîç Linting Flask Backend...'
        dir('dev/backend') {
          sh 'python3 -m ensurepip || true'
          sh 'python3 -m pip install --upgrade pip || true'
          sh 'pip3 install flake8 || true'
          sh 'flake8 app.py || true'
        }
      }
    }

    stage('Unit Tests') {
      steps {
        echo 'üß™ Running Unit Tests...'
        dir('dev/backend') {
          sh 'python3 -m unittest discover tests || true'
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        echo 'üê≥ Building Docker Image & Pushing...'
        dir('dev/backend') {
          script {
            docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
              def image = docker.build("${IMAGE_NAME}:${TAG}")
              image.push()
            }
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        echo 'üöÄ Deploying to Minikube...'
        dir('k8s/backend') {
          sh 'kubectl apply -f deployment.yaml --namespace=${PRIMARY_NS}'
          sh 'kubectl apply -f service.yaml --namespace=${PRIMARY_NS}'
        }
      }
    }

    stage('Health Check') {
      steps {
        echo '‚úÖ Running Health Checks...'
        sh 'sleep 10'
        sh 'curl --fail http://localhost:3000 || exit 1'
      }
    }
  }

  post {
    success {
      echo 'üéâ Deployment Success!'
    }
    failure {
      echo '‚ùå Deployment Failed.'
    }
  }
}
