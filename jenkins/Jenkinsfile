pipeline {
  agent any

  environment {
    IMAGE_NAME = 'rani19/backend'
    TAG = "build-${env.BUILD_NUMBER}"
    DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
    DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
    CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
    PRIMARY_NS = 'default'
    KUBECONFIG = '/root/.kube/config'
  }

  stages {
    stage('Clone Dev Repo') {
      steps {
        echo 'üì• Cloning smart-retail-dev repository...'
        dir('dev') {
          git url: "${DEV_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('Lint Backend Code') {
      steps {
        dir('dev/backend') {
          sh 'pip install flake8'
          sh 'flake8 app.py'
        }
      }
    }

    stage('Unit Tests') {
      steps {
        dir('dev/backend') {
          sh 'pip install -r requirements.txt'
          sh 'pytest tests/'
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        script {
          docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
            sh """
              docker build -t ${IMAGE_NAME}:${TAG} dev/backend
              docker push ${IMAGE_NAME}:${TAG}
            """
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        echo 'üöÄ Deploying to Kubernetes...'
        dir('config/k8s') {
          sh """
            sed -i 's|rani19/backend:.*|${IMAGE_NAME}:${TAG}|' backend-deployment.yaml
            kubectl apply -f backend-deployment.yaml --kubeconfig=${KUBECONFIG}
          """
        }
      }
    }

    stage('Health Check') {
      steps {
        echo '‚úÖ Checking service health...'
        sh 'sleep 10 && curl -f http://localhost:5000/api/products || exit 1'
      }
    }
  }

  post {
    success {
      echo 'üéâ Deployment Succeeded!'
    }
    failure {
      echo '‚ùå Deployment Failed.'
    }
  }
}
