pipeline {
  agent any

  environment {
    DEV_REPO_URL = "https://github.com/RaniSaed/smart-retail-dev.git"
    CONFIG_REPO_URL = "https://github.com/RaniSaed/smart-retail-config.git"
    IMAGE_BACKEND = "rani19/backend"
    IMAGE_FRONTEND = "rani19/frontend"
    TAG = "build-${env.BUILD_NUMBER}"
    DOCKER_CREDENTIALS_ID = "docker-hub-creds"
    KUBECONFIG = "/var/jenkins_home/.kube/config"
  }

  stages {
    stage('📥 Clone Repositories') {
      steps {
        echo '🔄 Cloning smart-retail-dev and smart-retail-config...'

        dir('dev') {
          git url: "${DEV_REPO_URL}", branch: 'main'
        }

        dir('config') {
          git url: "${CONFIG_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('🔍 Lint & Test Code') {
      steps {
        script {
          echo '🧪 Running flake8 for backend...'
          dir('dev/backend') {
            sh 'flake8 app.py || true'
          }

          echo '🧪 Running eslint for frontend...'
          dir('dev/frontend') {
            sh 'npm install'
            sh 'npx eslint src --ext .ts,.tsx || true'
          }

          echo '✅ Linting done (errors ignored for now)'
        }
      }
    }

    stage('🧪 Unit Tests (Backend)') {
      steps {
        dir('dev/backend') {
          sh 'pip install --break-system-packages -r requirements.txt || true'
          sh 'pytest || true'
        }
      }
    }

    stage('🐳 Build & Push Docker Images') {
      steps {
        script {
          docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
            dir('dev/backend') {
              def backendImage = docker.build("${IMAGE_BACKEND}:${TAG}")
              backendImage.push()
            }

            dir('dev/frontend') {
              def frontendImage = docker.build("${IMAGE_FRONTEND}:${TAG}")
              frontendImage.push()
            }
          }
        }
      }
    }
  }

  post {
    success {
      echo "✅ CI/CD pipeline completed up to Docker image push!"
    }
    failure {
      echo "❌ Pipeline failed. Check logs for more information."
    }
  }
}