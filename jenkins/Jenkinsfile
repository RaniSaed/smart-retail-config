pipeline {
  agent any

  environment {
    IMAGE_NAME = 'rani19/backend'
    TAG = "build-${env.BUILD_NUMBER}"
    DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
    DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
    CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
    PRIMARY_NS = 'default'
    KUBECONFIG = '/root/.kube/config'
  }

  stages {
    stage('👋 Welcome') {
      steps {
        echo '👋 Hello from Jenkins Pipeline!'
      }
    }

    stage('📥 Clone Dev Repo') {
      steps {
        dir('dev') {
          git url: "${DEV_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('📥 Clone Config Repo') {
      steps {
        dir('config') {
          git url: "${CONFIG_REPO_URL}", branch: 'main'
        }
      }
    }

    stage('🐍 Lint Flask Backend') {
      steps {
        dir('dev/backend') {
          sh '''
            echo "🔍 Running flake8..."
            pip install --break-system-packages flake8 > /dev/null || true
            flake8 . || true
          '''
        }
      }
    }

    stage('🧪 Run Flask Tests') {
      steps {
        dir('dev/backend') {
          sh '''
            echo "🧪 Installing requirements and running tests..."
            pip install --break-system-packages -r requirements.txt > /dev/null || true
            python3 -m unittest discover -s tests || true
          '''
        }
      }
    }

    stage('🐳 Build & Push Docker Image') {
      steps {
        dir('dev/backend') {
          withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            sh '''
              echo "🐳 Logging in to Docker Hub..."
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

              echo "📦 Building Docker image..."
              docker build -t $IMAGE_NAME:$TAG .

              echo "🚀 Pushing Docker image..."
              docker push $IMAGE_NAME:$TAG
            '''
          }
        }
      }
    }
  }

  post {
    success {
      echo '✅ Pipeline completed successfully!'
    }
    failure {
      echo '❌ Pipeline failed. Check logs for more info.'
    }
  }
}
